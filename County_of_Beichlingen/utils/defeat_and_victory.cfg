
#When the heros including Neverless are really supposed to die, resulting in defeat.
#define GSQ_HERO_DEATHS
	[event]
		name=last_breath
		[filter]
			id=Amgela
		[/filter]

		[message]
			speaker=Amgela
			message= _ "No! I'm to young to die."
		[/message]

		[endlevel]
			result=defeat
		[/endlevel]
	[/event]

	[event]
		name=last_breath
		[filter]
			id=Carl
		[/filter]

		[message]
			speaker=Carl
			message= _ "Greet my mother ..."
		[/message]

		[endlevel]
			result=defeat
		[/endlevel]
	[/event]

	[event]
		name=last_breath
		[filter]
			id=Neverless
		[/filter]

		[message]
			speaker=Neverless
			message= _ "Neeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeep!"
		[/message]

		[endlevel]
			result=defeat
		[/endlevel]
	[/event]
#enddef

#The hero dies during a quest. This results not in defeat, but in a continue, meaning he will appear in the next scenario (defined in the scenario) without the advancements gained and units recruited/recalled in this scenario - because he failed. Also the gold of side 1 will be set to half of the gold from the start of the scenario (that way you can't earn gold by going into quests and simply wait a few rounds and die.). Also the price of the quest will be raised by 100 gold or set to 50 if the price was 0.
#define GSQ_HERO_QUEST_DEATH QUEST_ID 
[event]
	name=last_breath
	[filter]
		id=$hero_units[0].id
	[/filter]

	[message]
		speaker=$hero_units[0].id
		message= _ "Damn it! That quest was too hard for me."
	[/message]

	{LOOKUP_INDEX quest_status id {QUEST_ID} quest_index}
	{VARIABLE new_price $quest_status[$quest_index].price}
	[if]
		[variable]
			name=new_price
			less_than=100
		[/variable]
	[then]
		{VARIABLE_OP new_price add 10}
	[/then]
	[else]
		{VARIABLE_OP new_price add 20}
	[/else]
	[/if]

	{GSQ_RESURRECT_NEVERLESS}
	[message]
		speaker=Neverless
		message= _ "You may try again, but now the quest will cost $new_price gold. Neep! You entered the quest with $startgold gold, 10% of that will be taken. Also you lose all units currently alive."
	[/message]

#Reducing the gold has to be after the message from Neverless!
	{VARIABLE_OP startgold divide 10}
	{VARIABLE_OP startgold multiply 9}
	{VARIABLE_OP startgold round floor} #Rounds down to the nearest integer.
	[modify_side]
		side=1
		gold=$startgold
	[/modify_side]

	{GSQ_SET_QUESTSTATUS {QUEST_ID} open $new_price}
	{CLEAR_VARIABLE new_price,quest_index,turnlimit}

	#kills all currently alive units of the player, meaning he won't be able to recall them.
	[kill]
		side=1
		x,y=1-200,1-200
		#covers complete map but does not affect recall list, because it would have to be 'recall, recall'
	[/kill]

	[endlevel]
		result=victory
		linger_mode=yes
		carryover_percentage=100
		carryover_add=false
		bonus=no
	[/endlevel]
[/event]
#enddef

#If Neverless dies during a quest, it has no direct consequence for the player. Of course he loses the unit, possible special events with this unit and of course the recruiting by this unit. Neverless will appear in the next scenario again.
#define GSQ_NEVERLESS_QUEST_DEATH
	[event]
		name=last_breath
		[filter]
			id=Neverless
		[/filter]

		[message]
			speaker=Neverless
			message= _ "Neep! You will have to master this quest without my help."
		[/message]
	[/event]
#enddef

#Since waiting for the automatic "turns over" results in defeat, this will fire the last-breath for the hero so the player sees the same effect as if his hero dies.
#The event goes off as soon as side 2 starts the turn-number stored in the variable "turnlimit". Use the turnlimit-variable if you adjust the turnsnumber during the scenario!
# It works even if there are no side-2 units alive. But make sure to have a side 2!
# TOD: Version 1.9 will have "side turn end" which should be better since it doesn't rely on side 2.
#define GSQ_TURNSOVER
[event]
	name=side 2 turn
	first_time_only=no
	[if]
		[variable]
			name=turn_number
			equals=$turnlimit
		[/variable]
	[then]
		[message]
			speaker=narrator
			message= _ "Turns over!"
		[/message]
		[kill]
			id=$hero_units[0].id
			fire_event=yes
		[/kill]
	[/then][/if]
[/event]
#enddef

#Clears the given variables - use to clear the variables restricted to the scenario. Only if the player activly won (it is his turn and the hero unit alive).
#define GSQ_VICTORY SCEN_VARIABLES
name=victory
	{CLEAR_VARIABLE {SCEN_VARIABLES}}
	{LOOKUP_INDEX quest_status id $quest_id quest_index}
	[if]
		[variable]
			name=side_number
			equals=1
		[/variable]
		[and]
			[have_unit] #checks if player lost
				id=$hero_units[0].id
			[/have_unit]
		[/and]
	[then]
#enddef

#it sets the status of the quest to completed and sets the price to the gold that was earned in the scenario. Also it calculates the bonus the player gets (BONUS_PER_TURN*remaining-turns), adds that to the gold of side 1 and shows a report of the gold-situation.
#define GSQ_VICTORY_STANDARD QUEST_ID BONUS_PER_TURN
	{VARIABLE_OP turnlimit sub $turn_number}
	{VARIABLE_OP turnlimit multiply {BONUS_PER_TURN}} #Now turnlimit contains amount of bonusgold
	{GSQ_GOLD_WITH_SOUND 1 $turnlimit}
	[store_gold]
		side=1
		variable=newgold
	[/store_gold]
	{VARIABLE earned_gold $newgold}
	{VARIABLE_OP earned_gold sub $startgold}
	{GSQ_RESURRECT_NEVERLESS}
	[message]
		speaker=Neverless
		message= _ "Early finish bonus: {BONUS_PER_TURN} per turn. Bonus: $turnlimit
New gold: $newgold
Startgold was $startgold so you won $earned_gold gold. You will go on with this amount or with 0 depending on what is higher."
	[/message]

	{GSQ_SET_QUESTSTATUS {QUEST_ID} completed $earned_gold}
	[endlevel]
		result=victory
		carryover_percentage=100
		carryover_add=false
		bonus=no
	[/endlevel]
	[/then][/if]
	{CLEAR_VARIABLE quest_index,turnlimit,newgold,earned_gold}
#enddef

#define GSQ_RESURRECT_NEVERLESS
[if]
	[have_unit]
		id=Neverless
	[/have_unit]
[then]
[/then]
[else]
	[unit]
		type=Vampire Bat
		id=Neverless
		canrecruit=yes
		placement=map,leader
	[/unit]
[/else][/if]
#enddef